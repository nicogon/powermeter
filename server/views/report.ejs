<%- include("header",{mode:'reports'}) %>


<div class="main-content-container container-fluid">

    <div class="d-flex justify-content-between">

        <div class="page-header row no-gutters py-4">
            <div class="col-12 col-sm-4 text-center text-sm-left mb-0">
                <span class="text-uppercase page-subtitle">Reporte</span>
                <h3 class="page-title">
                    <%=report.name%>
                </h3>
            </div>


        </div>

        <% if(report.timeEnd){ %>
        <div class="page-header py-4 mt-3" id="abortar-reporte" >
            <a href='/reportes/?abort=true' class="btn btn-sm btn-primary" style='color:white'>Abortar reporte</a>
        </div>
        <% } %>
    </div>

    <div class='row'>

        <div class='col-md-12 mb-4'>
            <div class="card card-small">
                <div class="card-body pt-0 row" style="margin-top:10px">

                    <canvas id="canvas" style="width:100%"></canvas>

                </div>
            </div>
        </div>

    </div>
    <div class='row'>

        <% if(report.timeEnd){ %>
        <div class='col-md-12 mb-4'>
            <div class="card card-small">
                <div class="card-body px-4 row">

                    <div class="progress position-relative">
                        <div id="porcentaje" class="progress-bar progress-bar-striped bg-success" role="progressbar"
                            style="width: 60%" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100"></div>
                        <small class="bar-text" id="porcentaje-txt">60% complete</small>
                    </div>


                </div>
            </div>
        </div>


        <div class="col-lg col-md-12  mb-4">
            <div class="stats-small stats-small--1 card card-small">
                <div class="card-body p-0 d-flex">
                    <div class="d-flex flex-column m-auto">
                        <div class="stats-small__data text-center">
                            <span class="stats-small__label text-uppercase">Consumo actual</span>
                            <h6 class="stats-small__value count my-3" id="medicion">
                                <%=report.currentPower%>w</h6>
                        </div>
                        <div class="stats-small__data">
                            <span id="currentMedicion"
                                class="stats-small__percentage stats-small__percentage--increase"><%=report.currentCurrent%>A</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <% } %>
        <div class="col-lg col-md-12  mb-4">
            <div class="stats-small stats-small--1 card card-small">
                <div class="card-body p-0 d-flex">
                    <div class="d-flex flex-column m-auto">
                        <div class="stats-small__data text-center">
                            <span class="stats-small__label text-uppercase">Consumo promedio</span>
                            <h6 class="stats-small__value count my-3" id="promedio">
                                <%=report.averagePower%>w</h6>
                        </div>
                        <div class="stats-small__data">
                            <span id="currentPromedio"
                                class="stats-small__percentage stats-small__percentage--increase"><%=report.averageCurrent%>A</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg col-md-12 mb-4">
            <div class="stats-small stats-small--1 card card-small">
                <div class="card-body p-0 d-flex">
                    <div class="d-flex flex-column m-auto">
                        <div class="stats-small__data text-center">
                            <span class="stats-small__label text-uppercase">Consumo maximo</span>
                            <h6 class="stats-small__value count my-3" id="maxima">
                                <%=report.maximumPower%>w</h6>
                        </div>
                        <div class="stats-small__data">
                            <span id="currentMaxima"
                                class="stats-small__percentage stats-small__percentage--increase"><%=report.maximumCurrent%>A</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>



    </div>


    <div class='row'>

        <div class='col-md-12 mb-4'>
            <div class="card card-small">
                <div class="card-body pt-0 row" style="margin-top:10px">

                    <canvas id="canvas2" style="width:100%"></canvas>

                </div>
            </div>
        </div>


    </div>



    <div class='row'>

        <div class='col-md-12'>
            <div class="card card-small">

                <div class="card-header border-bottom">
                    <h6 class="m-0">Mediciones individuales</h6>
                </div>
                <div class="card-body pt-0 row">


                    <table class="table">
                        <thead class="bg-light">
                            <tr>
                                <th scope="col" class="border-0">Dispositivo</th>
                                <% if(report.timeEnd){ %>
                                <th scope="col" class="border-0">Consumo Actual</th>
                                <% } %>
                                <th scope="col" class="border-0">Consumo Promedio</th>
                                <th scope="col" class="border-0">Consumo Maximo</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% for(medicion of report.meditions){ %>
                            <tr>
                                <td id="medicionNombre-<%-medicion.dispoId%>">
                                    <%=medicion.name%>
                                </td>
                                <% if(report.timeEnd){ %>
                                <td>
                                    <span id="medicion-<%-medicion.dispoId%>"><%=(medicion.currentPower)%>W </span>
                                    <small id="current-<%-medicion.dispoId%>"><%=(medicion.currentCurrent)%>A</small>
                                </td>
                                <% } %>
                                <td>
                                    <span id="medicionPromedio-<%-medicion.dispoId%>"><%=(medicion.averagePower)%>W
                                    </span> <small
                                        id="currentPromedio-<%-medicion.dispoId%>"><%=(medicion.averageCurrent)%>A</small>
                                </td>
                                <td>
                                    <span id="medicionMaxima-<%-medicion.dispoId%>"><%=(medicion.maximumPower)%>W</span>
                                    <small
                                        id="currentMaxima-<%-medicion.dispoId%>"><%=(medicion.maximumCurrent)%>A</small>
                                </td>

                            </tr>
                            <%} %>
                        </tbody>
                    </table>


                </div>
            </div>
        </div>
    </div>
    <br>


    <style>
        td small {
            color: #999;
        }

        .progress {
            width: 100%;
            height: 30px
        }

        .bar-text {
            left: 50%;
            text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
            transform: translate(-50%, 0);
            position: absolute;
            line-height: 30px;
            color: white;
            font-weight: bold;
            font-size: 18px;
            text-align: center
        }

        .progress-bar {
            height: 30px;
        }
    </style>





</div>




<script>
    let graphData = <%-JSON.stringify((report.meditions)) %>
        let report = <%-JSON.stringify({ ...report, meditions: undefined }) %>



            function getLast(data) {
                last = 0;
                data.forEach(medicion => {
                    if (medicion.puntualMeditions.length == 0) {
                        last = 0;
                        return;
                    }
                    if (medicion.puntualMeditions[medicion.puntualMeditions.length - 1].offset > last) last = medicion.puntualMeditions[medicion.puntualMeditions.length - 1].offset;
                })
                return last;
            }

    function getFirst(data) {
        first = 90000000000;
        data.forEach(medicion => {
            if (medicion.puntualMeditions.length == 0) {
                first = 0;
                return;
            }
            if (medicion.puntualMeditions[0].offset < first) first = medicion.puntualMeditions[0].offset;
        })
        return first;
    }

    function adaptMedicion(data) {
        return data.length > 0 ? data.map(({
            offset,
            value
        }) => ({
            x: offset,
            y: value
        })) : [{
            x: 0,
            y: 10
        }];
    }

    function randomHSL(i, transparent = false) {
        return transparent ? "hsla(" + ~~(360 * ((i / 4) % 1)) + ",70%,80%,0.1)" : "hsla(" + ~~(360 * ((i / 4) % 1)) + ",70%,80%,1)";
    }

    function adaptDatasets(dataSets) {
        return dataSets.map((dataSet, index) => {


            const color = randomHSL(index);
            const color2 = randomHSL(index, true);
            return {
                label: dataSet.name,
                backgroundColor: color2,
                borderColor: color,
                data: adaptMedicion(dataSet.puntualMeditions)
            }

        })

    }

    function calcularNombres(data) {
        return data.map((medicion) => (medicion.name));
    }



    function calcularColores(data) {
        return data.map((valor, index) => (index)).map((a) => randomHSL(a));
    }


    function calcularPorcentajes(data) {
        let maximo = 0.0001;
        for (const medicion of data) {
            maximo += medicion.averagePower;
        }
        return data.map((medicion) => ((100 * medicion.averagePower / maximo).toFixed(2)))
    }



    var config = {
        type: 'line',
        data: {
            datasets: adaptDatasets(graphData)
        },
        options: {
            maintainAspectRatio: true,
            responsive: true,
            animation: false,
            legend: {
                display: true
            },
            layout: {
                padding: {
                    left: 20,
                    right: 20,
                    top: 20,
                    bottom: 20
                }
            },
            tooltips: {

                enabled: true,
                custom: false
            },
            elements: {
                point: {
                    radius: 2
                },
                line: {
                    tension: 0
                }
            },
            scales: {
                xAxes: [{
                    type: 'linear',
                    position: 'bottom',
                    gridLines: false,
                    scaleLabel: false,
                    ticks: {
                        max: getLast(graphData),
                        min: getFirst(graphData),
                        display: false,
                        callback: function (value, index, values) {
                            var seconds = Math.round(value / 1000);
                            var minutes = Math.round(seconds / 60)

                            if (index == 0) return '';
                            return minutes + ' min' //Math.round(value/1000);
                        }
                    }
                }],
                yAxes: [{
                    ticks: {
                        beginAtZero: true,
                        // Include a dollar sign in the ticks
                        callback: function (value, index, values) {
                            return value + "W";
                        }
                    }


                }],
            },
        }
    };

    function calcularPorcentaje(data) {
        if (data.fin < data.now) {
            return 100;
        } else {
            return 100 - (100 * (data.timeEnd - data.now) / data.secondsDuration).toFixed(0);
        }
    }


    $(document).ready(function () {

        function updatePorcentaje(data, finished = false) {
            porcentaje = finished ? 100 : calcularPorcentaje(data);
            $("#porcentaje").width(porcentaje >= 100 ? '100%' : porcentaje + "%");
            $("#porcentaje-txt").html(porcentaje >= 100 ? "Reporte Finalizado" : porcentaje + "% reporte en progreso");
        }

        updatePorcentaje(report)


        function updateCharts() {
            $.getJSON("/reportes/temp/?format=json", function (data) {

                if (!data.timeEnd) {
                    updatePorcentaje(data, true);
                    return;

                }

                updatePorcentaje(data);

                myDoughnutChart.data.datasets[0].data = calcularPorcentajes(data.meditions);

                myDoughnutChart.update();


                // These labels appear in the legend and in the tooltips when hovering different arcs


                for (medicion of data.meditions) {
                    $("#medicion-" + medicion.dispoId).html(medicion.currentPower + "W")
                    $("#medicionMaxima-" + medicion.dispoId).html(medicion.maximumPower + "W")
                    $("#medicionPromedio-" + medicion.dispoId).html(medicion.averagePower + "W")
                    $("#current-" + medicion.dispoId).html(medicion.currentCurrent + "A")
                    $("#currentMaxima-" + medicion.dispoId).html(medicion.maximumCurrent + "A")
                    $("#currentPromedio-" + medicion.dispoId).html(medicion.averageCurrent + "A")
                }


                $("#medicion").html(data.currentPower + "W")
                $("#maxima").html(data.maximumPower + "W");
                $("#promedio").html(data.averagePower + "W")


                $("#currentMedicion").html(data.currentCurrent + "A")
                $("#currentMaxima").html(data.maximumCurrent + "A");
                $("#currentPromedio").html(data.averageCurrent + "A")


                powerChart.data.datasets = adaptDatasets(data.meditions);
                powerChart.options.scales.xAxes[0].ticks.min = getFirst(data.meditions)
                powerChart.options.scales.xAxes[0].ticks.max = getLast(data.meditions)
                powerChart.update();
            });
        }

        setInterval(function () {
                <% if (report.timeEnd) { %>
                updateCharts()
                <% } %>
            }, 1000);

    });

    let powerChart;
    let myDoughnutChart;
    let pieChart;

    window.onload = function () {

        var ctx = document.getElementById('canvas').getContext('2d');
        powerChart = new Chart(ctx, config);

        var ctx2 = document.getElementById('canvas2').getContext('2d');

        data = {
            datasets: [{
                data: calcularPorcentajes(graphData),
                backgroundColor: calcularColores(graphData),
                backgroundColor: calcularColores(graphData)
            }],
            // These labels appear in the legend and in the tooltips when hovering different arcs
            labels: calcularNombres(graphData)
        };
        myDoughnutChart = new Chart(ctx2, {
            type: 'doughnut',
            data: data,
            options: {
                animation: false
            }
        });

    };
</script>


</div>

<% include footer.ejs %>
